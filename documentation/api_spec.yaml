---
openapi: 3.0.0
info:
  title: DPRCal API
  description: API for the DPRCal application
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.0
servers:
- url: https://virtserver.swaggerhub.com/justinwald99/dprcal/1.0.0
  description: SwaggerHub API Auto Mocking
tags:
- name: admins
  description: Secured Admin-only calls
- name: instructors
  description: Operations available to instructors
- name: students
  description: Operations available to users who are only able to enroll and take courses
paths:
  /auth/token:
    post:
      summary: Verifies a User login and returns their JWT token.
      description:
        Used to take in login information from the login page, compare with the stored hash, then return a token for authentication
      operationId: getToken
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                username:   # <!--- form field name
                  type: string
                password:    # <!--- form field name
                  type: string
              required:
                - username
                - password
        required: true
      responses:
        "201":
          description: Created user successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  sub:
                    type: string
                    description: The username.
                  role:
                    type: string
                    description: The user's previously defined role, which enables them to take actions.
          # The JWT Token is included in the response header
        "401":
          description: Incorrect user or password
        "500":
          description: Internal Server Error

  /users:
    get:
      tags:
      - admins
      - instructors
      - students
      summary: Returns all created users
      description:
        Get all users in the dpr_cal database
      operationId: getUsers
      responses:
        "200":
          description: Returned user information successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        "500":
          description: Internal Server Error
    post:
      tags:
      - admins
      summary: Create a new user.
      description:
        Create a new user object for the first time. The backend generates a new uid.
      operationId: createUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        "201":
          description: Created user successfully
        "400":
          description: Invalid user parameters
        "403":
          description: User not authorized
  /users/me:
    get:
      tags:
      - admins
      - instructors
      - students
      summary: Returns the current user's information
      description:
        If a user is logged into the system, this will return their user information as stored in the DB, which is helpful for getting their user_id or username
      operationId: getMe
      responses:
        "200":
          description: Returned user information successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        "500":
          description: Internal Server Error
  /users/{id}:
      get:
        tags:
        - admins
        - instructors
        - students
        summary: Returns a created user from its user_id
        description:
          Get a user that has already been created.
            Using the autogenerated UID on user creation
        operationId: getUserById
        responses:
          "200":
            description: Returned user information successfully
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/User'
          "404":
            description: user_id not found
          "500":
            description: Internal Server Error
      put:
        tags:
        - admins
        summary: Edits exisiting information for this User
        description:
          Edit a user that has already been created.
            The id generated when the User was created is used for access
        operationId: updateUser
        requestBody:
          description: Pass the updated User object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          required: true
        responses:
          "200":
            description: User updated successfully
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/User'
          "401":
            description: User not authorized
          "404":
            description: User id not found
      delete:
        tags:
        - admins
        summary: Deletes this user
        description:
          Delete a user that has been created.
            The id generated when the User was created is used to find and delete the User
        operationId: deleteUserById
        responses:
          "200":
            description: User deleted successfully
          "403":
            description: User not authorized
          "404":
            description: User_id not found
      parameters: 
          - name: id
            in: path
            description: User ID generated by the DB when they were created
            required: true
            schema:
              $ref: '#/components/schemas/User/properties/user_id'
  /users/user/{role}:
      get:
        tags:
        - admins
        - instructors
        - students
        summary: Returns all users with the specified Role
        description:
          Get a JSON containing all the Users in the dpr_cal database who have the Role specified
        operationId: getUsersInRole
        responses:
          "200":
            description: Returned user information successfully
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/User'
          "404":
            description: role not found
      parameters: 
          - name: role
            in: path
            description: User ID generated by the DB when they were created
            required: true
            schema:
              $ref: '#/components/schemas/User/properties/role'
  /users/user/{username}:
      get:
        tags:
        - admins
        - instructors
        - students
        summary: Returns a created user from its username
        description:
          Get a user that has already been created.
            Using the autogenerated UID on user creation
        operationId: getUserByName
        responses:
          "200":
            description: Returned user information successfully
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/User'
          "404":
            description: username not found
      parameters: 
          - name: username
            in: path
            description: Username assigned to the User upon creation
            required: true
            schema:
              $ref: '#/components/schemas/User/properties/username'
      
  /courses:
    get:
        tags:
        - admins
        - instructors
        - students
        summary: Returns all Courses in the dpr_cal database
        description:
          Get all courses that have already been created.
        operationId: getCourses
        responses:
          "200":
            description: Returned course information successfully
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Course'
    post:
      tags:
      - admins
      summary: Create a new course.
      description:
        Create a new course object for the first time. Only admins can do this, then Instructors can create new sections.
          The backend generates a new uid that is assigned to the course.
      operationId: addCourse
      requestBody:
        description: pass the course to be created
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Course'
        required: true
      responses:
        "201":
          description: Created course successfully
          content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Course'
        "400":
          description: Invalid course parameters
        "401":
          description: User not authorized
  /courses/{id}:
      get:
        tags:
        - admins
        - instructors
        - students
        summary: Returns a created course by its id
        description:
          Get a course that has already been created.
            The id that was generated when the Course was created is used to access the Course
        operationId: getCourseById
        responses:
          "200":
            description: Returned course information successfully
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Course'
          "404":
            description: course_id not found
      put:
        tags:
        - admins
        - instructors
        summary: Edits exisiting information for this Course
        description:
          Edit a course that has already been created.
            The id generated when the Course was created is used to access the Course
        operationId: updateCourse
        requestBody:
          description: Pass the updated Course object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Course'
          required: true
        responses:
          "200":
            description: Course updated successfully
          "403":
            description: User not authorized
          "404":
            description: Course_id not found
      delete:
        tags:
        - admins
        - instructors
        summary: Deletes this course
        description:
          Delete a course that has been created.
            The id generated when the Course was created is used to find and delete the Course
        operationId: deleteCourseById
        responses:
          "200":
            description: Course deleted successfully
          "401":
            description: User not authorized
          "404":
            description: Course_id not found
      parameters: 
          - name: id
            in: path
            description: Course ID from the DB
            required: true
            schema:
              $ref: '#/components/schemas/Course/properties/id'
  /sections:
    get:
        tags:
        - admins
        - instructors
        - students
        summary: Returns all of the sections in the DB, no matter the Course
        description:
          Get all sections that have already been created. Useful for display to the Calendar
        operationId: getSections
        responses:
          "200":
            description: Returned section information successfully
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Section'
  /courses/{id}/sections:
    get:
        tags:
        - admins
        - instructors
        - students
        summary: Returns all of the Course's sections
        description:
          Get all sections under the given Course ID that have already been created.
            The id that was generated when the Course was created is used to access the Sections from the Course ID
        operationId: getCourseSections
        responses:
          "200":
            description: Returned section information successfully
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Section'
          "404":
            description: course_id not found
    post:
      tags:
      - admins
      - instructors
      summary: Create a new section of the course.
      description:
        Create a new section object under the Course. 
          The backend generates a new id that is assigned to the section.
      operationId: createSection
      requestBody:
        description: Pass a section object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Section'
        required: true
      responses:
        "201":
          description: Created section successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Section'
        "400":
          description: Invalid section parameters
        "401":
          description: User not authorized
    parameters: 
          - name: id
            in: path
            description: Course ID
            required: true
            schema:
              $ref: '#/components/schemas/Course/properties/id'  
  /courses/{id}/sections/{section_id}:
      get:
        tags:
        - admins
        - instructors
        - students
        summary: Returns a created section by its id
        description:
          Get a section that has already been created.
            The id that was generated when the Section was created is used to access the Section from the Course ID
        operationId: getSectionById
        responses:
          "200":
            description: Returned section information successfully
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Section'
          "404":
            description: course id or section_id not found
      put:
        tags:
        - admins
        - instructors
        summary: Edits exisiting information for this Section
        description:
          Edit a section that has already been created.
            The id generated when the Section was created is used to access the Section
        operationId: updateSection
        requestBody:
          description: Pass the updated Section object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Section'
          required: true
        responses:
          "200":
            description: Section updated successfully
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Section'
          "401":
            description: User not authorized
          "404":
            description: course id or section_id not found
      delete:
        tags:
        - admins
        - instructors
        summary: Deletes this Section
        description:
          Delete a section that has been created.
            The id generated when the Section was created is used to find and delete the Section
        operationId: deleteSectionById
        responses:
          "200":
            description: Section deleted successfully
          "403":
            description: User not authorized
          "404":
            description: course_id or section_id not found
      parameters: 
          - name: id
            in: path
            description: Course ID
            required: true
            schema:
              $ref: '#/components/schemas/Course/properties/id'
          - name: section_id
            in: path
            description: Section ID
            required: true
            schema:
              $ref: '#/components/schemas/Section/properties/section_id'
  /courses/{id}/sections/{section_id}/roster:
      get:
        tags:
        - admins
        - instructors
        summary: Retrieve the entire list of students enrolled in a section
        description:
          Returns the roster for a section which contains a List of the IDs of the Students enrolled
            The id that was generated when the Section was created is used to access the Section from the Course ID
        operationId: getRoster
        responses:
          "200":
            description: Returned section roster successfully
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Roster'
          "403":
            description: User not authorized
          "404":
            description: course_id or section_id not found
      post:
        tags:
        - admins
        - instructors
        - students
        summary: Add a student to the roster
        description:
          Add a student to the Roster.
            The student object will be populated in the Roster, preserving the current roster
        operationId: addUserToRoster
        requestBody:
          description: Pass the list of Students to add to the Roster
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          required: true
        responses:
          "200":
            description: Students added successfully
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Roster'
          "404":
            description: course_id or section_id not found
      
      parameters: 
          - name: id
            in: path
            description: Course ID
            required: true
            schema:
              $ref: '#/components/schemas/Course/properties/id'
          - name: section_id
            in: path
            description: Section ID
            required: true
            schema:
              $ref: '#/components/schemas/Section/properties/section_id'
  /courses/{id}/sections/{section_id}/roster/{student_id}:
    delete:
        tags:
        - admins
        - instructors
        summary: Removes one or more students from the Roster
        description:
          Removes students that were previously added to the roster.
            Takes in a List<User> that is compared to Rostered students, removing any matches. Students in List with no roster matches are ignored.
        operationId: removeStudentsFromRoster
        responses:
          "200":
            description: Students removed successfully
          "403":
            description: User not authorized
          "404":
            description: course_id or section_id not found
    parameters: 
          - name: id
            in: path
            description: Course ID
            required: true
            schema:
              $ref: '#/components/schemas/Course/properties/id'
          - name: section_id
            in: path
            description: Section ID
            required: true
            schema:
              $ref: '#/components/schemas/Section/properties/section_id'
          - name: student_id
            in: path
            description: Student ID
            required: true
            schema:
              $ref: '#/components/schemas/User/properties/user_id'
  /instructors:
    get:
        tags:
        - admins
        - instructors
        - students
        summary: Returns all Instructors in the dpr_cal database
        description:
          Get all instructors that have already been created.
        operationId: getInstructors
        responses:
          "200":
            description: Returned instructor information successfully
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Instructor'
    post:
      tags:
      - admins
      summary: Create a new instructor.
      description:
        Create a new instructor object for the first time. Only admins can do this, then instructors can create new sections.
          The backend generates a new uid that is assigned to the instructor.
      operationId: addInstructor
      requestBody:
        description: pass the instructor to be created
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Instructor'
        required: true
      responses:
        "201":
          description: Created instructor successfully
          content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Instructor'
        "400":
          description: Invalid instructor parameters
        "401":
          description: User not authorized
  /instructors/{id}:
    get:
        tags:
        - admins
        - instructors
        - students
        summary: Returns all Instructors in the dpr_cal database
        description:
          Get all instructors that have already been created.
        operationId: getInstructor
        responses:
          "200":
            description: Returned instructor information successfully
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Instructor'
    put:
      tags:
      - admins
      - instructors
      summary: Update an instructor.
      description:
        Edit a preexisting instructor's details by passing in the new JSON
      operationId: updateInstructor
      requestBody:
        description: pass the instructor to be created
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Instructor'
        required: true
      responses:
        "201":
          description: Created instructor successfully
          content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Instructor'
        "400":
          description: Invalid instructor parameters
        "401":
          description: User not authorized
    delete:
        tags:
        - admins
        summary: Deletes this instructor
        description:
          Delete an instructor that has been created.
            The id generated when the instructor was created is used to find and delete the instructor
        operationId: deleteInstructor
        responses:
          "200":
            description: Instructor deleted successfully
          "401":
            description: User not authorized
          "404":
            description: Instructor ID not found
    parameters: 
          - name: id
            in: path
            description: Instructor ID
            required: true
            schema:
              $ref: '#/components/schemas/Instructor/properties/id'
  /instructors/{id}/sections:
    get:
        tags:
        - admins
        - instructors
        - students
        summary: Returns all of this Instructor's Sections
        description:
          Get all sections taught by this instructor.
        operationId: getInstructorSections
        responses:
          "200":
            description: Returned instructor section information successfully
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Section'
          "401":
            description: User not authorized
          "404":
            description: Instructor ID not found
    parameters: 
          - name: id
            in: path
            description: Instructor ID
            required: true
            schema:
              $ref: '#/components/schemas/Instructor/properties/id'
  /instructors/user_id/{user_id}:
    get:
        tags:
        - admins
        - instructors
        summary: Returns the Instructor with the specified User_ID
        description:
          Uses the User_ID given to find an Instructor. This is useful for displaying the Sections taught to a logged-in Instructor
        operationId: getInstructorByUserID
        responses:
          "200":
            description: Returned instructor information successfully
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Instructor'
          "401":
            description: User not authorized
          "404":
            description: Instructor ID not found
    parameters: 
          - name: user_id
            in: path
            description: User ID of an Instructor
            required: true
            schema:
              $ref: '#/components/schemas/Instructor/properties/user_id'
          
components:
  schemas:
    Course:
      required:
      - category
      - description
      - id
      - name
      - requirements
      type: object
      properties:
        id:
          type: integer
          example: 492
        name:
          type: string
          example: Fire Safety II
        category:
          type: string
          example: Safety
        description:
          type: string
          example: Basics of fire safety.
        requirements:
          type: object
    Section:
      required:
      - section_id
      - roster
      - attendance
      type: object
      properties:
        section_id:
          type: integer
          example: 001
        instructor:
          type: object #User
          example: John Doe
        location:
          type: string
          example: Umstead Park
        time:
          type: object #DateTime
          example: 03/01/2022 18:00:00 UTC.
        roster:
          type: object
          properties:
              students:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        attendance:
          type: object
          properties:
              students:
                type: array
                items:
                  $ref: '#/components/schemas/User'
    User:
      type: object
      required:
      - user_id
      - username
      - role
      properties:
        user_id:
          type: integer
          example: 000281
        username:
          type: string
          example: jdoe8
        firstname:
          type: string
          example: John
        lastname:
          type: string
          example: Doe
        role:
          type: object
    Instructor:
      type: object
      required:
        - id
        - user_id
        - title
      properties:
        id:
          type: integer
          example: 1
        title:
          type: string
          example: Naturalist
        user_id:
          type: integer
          example: 3
    Roster:
      type: object
      required:
      - id
      - user_id
      - section_id
      properties:
        id:
          type: integer
          example: 2
        user_id:
          type: integer
          example: 2
        section_id:
          type: integer
          example: 2